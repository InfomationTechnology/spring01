<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)

如果用接口形式，则namespace必须是接口的全类名
 -->
<mapper namespace="com.hjj.dao.mybatis.AccountMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="com.hjj.model.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->
    <!--
        根据id查询得到一个user对象
     -->

    <!-- 加钱 -->
    <update id="increaseMoney" parameterType="java.util.Map">
        update t_account set money =money+#{money} where id=#{id}
        <!-- 接收list参数，循环着组装sql语句，注意for循环的写法
         separator=";" 代表着每次循环完，在sql后面放一个分号
         item="cus" 循环List的每条的结果集
         collection="list" list 即为 map传过来的参数key -->
        <!--<foreach collection="list" separator=";" item="cus">
            update t_account set
            money =money+#{cus.money}
            where id = #{cus.id}
        </foreach>-->
    </update>

    <!-- 减钱 -->
    <update id="decreaseMoney" parameterType="java.util.Map">
        update t_account set money =money-#{money} where id=#{id}
    </update>
</mapper>